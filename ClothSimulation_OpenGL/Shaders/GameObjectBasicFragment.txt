#version 330 core
out vec4 FragColor;

in vec2 FragTextureCoordinates;
in vec3 FragNormal;
in vec3 FragPos;

// texture samplers
uniform sampler2D textureData;

uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;

void main()
{   
    vec3 color;
	color.x =0.5f;
	color.y =0.5f;
	color.z =0.0f;

    float ambientStrength = 1.0f;
    vec3 ambient = ambientStrength * lightColor;
  	
    vec3 norm = normalize(FragNormal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  
        
    vec3 result = (ambient + diffuse + specular) * color;

    FragColor = vec4(result.x,result.y,result.z,1.0);  
    //FragColor = vec4(0.5,0.5,0.0,1.0);  
    // FragColor = texture(textureData, FragTextureCoordinates);
}